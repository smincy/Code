import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_7576 {
	public static int[][] dir = {{-1,0},{1,0},{0,-1},{0,1}};
	public static int M, N;
	public static int[][] arr;
	
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		
		arr = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < M; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		bfs();
	}
	
	public static void bfs() {
		Queue<Point> que = new LinkedList<>();
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (arr[i][j]==1) {
					que.add(new Point(i, j));
				}
			}
		}
		
		while (!que.isEmpty()) {
			Point p = que.poll();
			
			for (int i = 0; i < dir.length; i++) {
				int newX = p.x + dir[i][0];
				int newY = p.y + dir[i][1];
				if (!isIn(newX, newY)) continue;
				if (arr[newX][newY]==0) {
					arr[newX][newY] = arr[p.x][p.y]+1;
					que.add(new Point(newX,newY));
				}
				
			}
		}
		
		int max = Integer.MIN_VALUE;
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (arr[i][j]==0) {
					System.out.println(-1);
					return;
				}
				if (max < arr[i][j]) {
					max = arr[i][j];
				}
			}
		}
		
		System.out.println(max-1);
		
	}
	
	public static class Point{
		int x;
		int y;
		
		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static boolean isIn(int i, int j) {
		return i>=0 && i<N && j>=0 && j<M;
	}
}
